name: CI Build

on:
  workflow_dispatch:
    inputs:
      push-docker-image-to-harbor:
        description: 'Push Docker Image to Harbor'
        type: boolean
        default: false
  pull_request:
  push:
    branches:
      - main
      - develop

jobs:
  lint-and-unit-test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn --immutable

      - name: Run linting
        run: yarn lint

      - name: Run unit tests
        run: yarn test

      - name: Upload coverage reports to Codecov
        if: success()
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@f2dba722c67b86c6caa034178c6e4d35335f6706 # v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: End-to-End (with mock data) Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn --immutable

      - name: Run e2e tests
        run: yarn e2e

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: Inventory management system Screenshots
          path: cypress/screenshots

  e2e-tests-api:
    name: End-to-End (with api) Tests
    runs-on: ubuntu-latest

    steps:
      - name: Clone IMS api repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          repository: ral-facilities/inventory-management-system-api
          ref: main

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.12'

      # This is required as need to setup api in a different directory as checkout will attempt delete
      # all existing files which in this case will include a data directory created by docker causing
      # a permission error (checkout action also can't specify a different directory to clone into)
      - name: Move IMS api repo
        run: |
          cd ..
          mkdir inventory-management-system-api
          mv -v inventory-management-system/* inventory-management-system-api/
          cd inventory-management-system-api/

      - name: Start MongoDB (For inventory-management-system-api)
        working-directory: ../inventory-management-system-api
        run: |
          docker compose up --detach mongo-db

      # Use docker run here to test the actual built image
      # Use same network as the MongoDB instance (which is generated by docker compose based on the folder
      # name)
      - name: Start inventory-management-system-api
        run: |
          docker run -d --network=host \
          --name inventory_management_system_api_container \
          --env AUTHENTICATION__ENABLED=false \
          --env API__TITLE="Inventory Management System API" \
          --env API__DESCRIPTION="This is the API for the Inventory Management System" \
          --env DATABASE__PROTOCOL="mongodb" \
          --env DATABASE__USERNAME="root" \
          --env DATABASE__PASSWORD="example" \
          --env DATABASE__HOST_AND_OPTIONS="localhost:27017/?authMechanism=SCRAM-SHA-256&authSource=admin" \
          --env DATABASE__NAME="ims" \
          --env API__ALLOWED_CORS_HEADERS='["*"]' \
          --env API__ALLOWED_CORS_ORIGINS='["*"]' \
          --env API__ALLOWED_CORS_METHODS='["*"]' \
          --env OBJECT_STORAGE__ENABLED=true \
          --env OBJECT_STORAGE__API_REQUEST_TIMEOUT_SECONDS=10 \
          --env OBJECT_STORAGE__API_URL=http://localhost:8002 \
          --volume /home/runner/work/inventory-management-system/inventory-management-system-api/logging.example.ini:/app/logging.ini \
          harbor.stfc.ac.uk/inventory-management-system/ims-api:main

      - name: Clone Object Storage api repo
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493
        with:
          repository: ral-facilities/object-storage-api
          ref: main
          path: object-storage-api

      - name: Move Object Storage api repo
        run: |
          cd ..
          mkdir object-storage-api
          mv -v inventory-management-system/* .
          cd object-storage-api/

      - name: Start MongoDB and MinIO (For object-storage-api)
        working-directory: ../object-storage-api
        run: |
          docker compose up --detach mongo-db minio
          sleep 10

      - name: Create MinIO buckets (For object-storage-api)
        working-directory: ../object-storage-api
        run: |
          docker compose up minio-create-buckets

      - name: Start object-storage-api
        run: |
          docker run -d -p 8002:8000 \
          --name object_storage_api_container \
          --network object-storage-api_default \
          --env AUTHENTICATION__ENABLED=false \
          --env API__TITLE="Object Storage Service API" \
          --env API__DESCRIPTION="This is the API for the Object Storage Service" \
          --env DATABASE__PROTOCOL="mongodb" \
          --env DATABASE__USERNAME="root" \
          --env DATABASE__PASSWORD="example" \
          --env DATABASE__HOST_AND_OPTIONS="object-storage-api-mongodb:27017" \
          --env DATABASE__NAME="object-storage" \
          --env API__ALLOWED_CORS_HEADERS='["*"]' \
          --env API__ALLOWED_CORS_ORIGINS='["*"]' \
          --env API__ALLOWED_CORS_METHODS='["*"]' \
          --env OBJECT_STORAGE__ENDPOINT_URL="http://localhost:9000" \
          --env OBJECT_STORAGE__ACCESS_KEY="root" \
          --env OBJECT_STORAGE__SECRET_ACCESS_KEY="example_password" \
          --env OBJECT_STORAGE__BUCKET_NAME="object-storage" \
          --env OBJECT_STORAGE__PRESIGNED_URL_EXPIRY_SECONDS=1800 \
          --env ATTACHMENT__MAX_SIZE_BYTES=104857600 \
          --env IMAGE__THUMBNAIL_MAX_SIZE_PIXELS=300 \
          --env ATTACHMENT__ALLOWED_FILE_EXTENSIONS='[".csv", ".doc", ".docx", ".ods", ".odt", ".rtf", ".pdf", ".txt", ".xls", ".xlsx"]' \
          --env ATTACHMENT__UPLOAD_LIMIT=50 \
          --env IMAGE__ALLOWED_FILE_EXTENSIONS='[".bmp", ".jpe", ".jpeg", ".jpg", ".png", ".tif", ".tiff", ".webp"]' \
          --env IMAGE__UPLOAD_LIMIT=100 \
          --add-host "localhost:host-gateway" \
          --volume /home/runner/work/inventory-management-system/object-storage-api/logging.example.ini:/app/logging.ini \
          harbor.stfc.ac.uk/scd-object-storage-api/object-storage-api:main

      - name: Checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn --immutable

      - name: Run e2e tests
        run: yarn e2e:api

      - name: Output docker logs (ims mongodb)
        if: failure()
        run: docker logs ims-api-mongodb

      - name: Output docker logs (ims api)
        if: failure()
        run: docker logs inventory_management_system_api_container

      - name: Output docker logs (object-storage mongodb)
        if: failure()
        run: docker logs object-storage-api-mongodb

      - name: Output docker logs (object-storage minio)
        if: failure()
        run: docker logs object-storage-minio

      - name: Output docker logs (object-storage api)
        if: failure()
        run: docker logs object_storage_api_container

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: Inventory management system (with api) Screenshots
          path: cypress/screenshots
  bundle_analysis:
    # This job triggers only if all the other jobs succeed.
    needs: [lint-and-unit-test, e2e-tests, e2e-tests-api]
    name: Bundle Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn --immutable

      - name: Build app for production
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: yarn build

  docker:
    # This job triggers only if all the other jobs succeed. It builds the Docker image and if successful,
    # it pushes it to Harbor.
    needs: [lint-and-unit-test, e2e-tests, e2e-tests-api]
    name: Docker
    runs-on: ubuntu-latest
    env:
      PUSH_DOCKER_IMAGE_TO_HARBOR: ${{ inputs.push-docker-image-to-harbor != null && inputs.push-docker-image-to-harbor || 'false' }}
    steps:
      - name: Check out repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to Harbor
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ secrets.HARBOR_URL }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ secrets.HARBOR_URL }}/ims

      - name: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) && 'Build and push Docker image to Harbor' || 'Build Docker image' }}
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ fromJSON(env.PUSH_DOCKER_IMAGE_TO_HARBOR) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
